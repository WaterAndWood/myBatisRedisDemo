<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 ，为了使用接口动态代理，这里必须是接口的全路径名-->
<mapper namespace="com.wz.myBatisRedisDemo.dao.CityMapper">
    <!--
       1.#{},预编译的方式preparedstatement，使用占位符替换，防止sql注入，一个参数的时候，任意参数名可以接收
       2.${},普通的Statement，字符串直接拼接，不可以防止sql注入，一个参数的时候，必须使用${value}接收参数
     -->

    <select id="getCityByName" resultType="com.wz.myBatisRedisDemo.pojo.City">
        select *
--         id as id, city_name as cityName, province_name as provinceName
        from db_city where city_name = #{cityName}
    </select>

    <select id="getCityAll" resultType="com.wz.myBatisRedisDemo.pojo.City">
        select * from db_city
    </select>

    <select id="getCityAllByProvince" resultType="com.wz.myBatisRedisDemo.pojo.City">
        select * from db_city where province_name = #{provinceName}
    </select>

    <insert id="insertCity" useGeneratedKeys="true" parameterType="com.wz.myBatisRedisDemo.pojo.City">
            <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
                select replace(UUID(), '-', '')
            </selectKey>
            insert into db_city (id, city_name, province_name) values (#{id}, #{cityName}, #{provinceName})
    </insert>

    <update id="updateCity" useGeneratedKeys="true" parameterType="com.wz.myBatisRedisDemo.pojo.City">
        update db_city
        <trim prefix="set" suffixOverrides=",">
            <if test="cityName != null">city_name = #{cityName},</if>
            <if test="provinceName != null">province_name = #{provinceName}</if>
        </trim>
        where (id = #{id});
    </update>

    <delete id="deleteCity" parameterType="com.wz.myBatisRedisDemo.pojo.City">
        delete from db_city where city_name = #{cityName};
    </delete>
<!--    &lt;!&ndash; statement，内容：sql语句。-->
<!--       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致-->
<!--       resultType：sql语句查询结果集的封装类型，使用动态代理之后和方法的返回类型一致；resultMap：二选一-->
<!--       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致-->
<!--     &ndash;&gt;-->
<!--    <select id="queryUserById" resultType="com.inspur.mybatis.pojo.User">-->
<!--        select * from tb_user where id = #{id}-->
<!--    </select>-->
<!--    <select id="queryUserAll" resultType="com.inspur.mybatis.pojo.User">-->
<!--        select * from tb_user-->
<!--    </select>-->
<!--    &lt;!&ndash; 新增的Statement-->
<!--       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致-->
<!--       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致-->
<!--       useGeneratedKeys:开启主键回写-->
<!--       keyColumn：指定数据库的主键-->
<!--       keyProperty：主键对应的pojo属性名-->
<!--     &ndash;&gt;-->
<!--    <insert id="insertUser" useGeneratedKeys="true" keyColumn="id" keyProperty="id"-->
<!--            parameterType="com.inspur.mybatis.pojo.User">-->
<!--        INSERT INTO tb_user (-->
<!--        id,-->
<!--        user_name,-->
<!--        password,-->
<!--        name,-->
<!--        age,-->
<!--        sex,-->
<!--        birthday,-->
<!--        created,-->
<!--        updated-->
<!--        )-->
<!--        VALUES-->
<!--        (-->
<!--        #{id},-->
<!--        #{userName},-->
<!--        #{password},-->
<!--        #{name},-->
<!--        #{age},-->
<!--        #{sex},-->
<!--        #{birthday},-->
<!--        NOW(),-->
<!--        NOW()-->
<!--        );-->
<!--    </insert>-->
<!--    &lt;!&ndash;-->
<!--       更新的statement-->
<!--       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致-->
<!--       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致-->
<!--     &ndash;&gt;-->
<!--    <update id="updateUser" parameterType="com.inspur.mybatis.pojo.User">-->
<!--        UPDATE tb_user-->
<!--        <trim prefix="set" suffixOverrides=",">-->
<!--            <if test="userName!=null">user_name = #{userName},</if>-->
<!--            <if test="password!=null">password = #{password},</if>-->
<!--            <if test="name!=null">name = #{name},</if>-->
<!--            <if test="age!=null">age = #{age},</if>-->
<!--            <if test="sex!=null">sex = #{sex},</if>-->
<!--            <if test="birthday!=null">birthday = #{birthday},</if>-->
<!--            updated = now(),-->
<!--        </trim>-->
<!--        WHERE-->
<!--        (id = #{id});-->
<!--    </update>-->
<!--    &lt;!&ndash;-->
<!--       删除的statement-->
<!--       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致-->
<!--       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致-->
<!--     &ndash;&gt;-->
<!--    <delete id="deleteUserById" parameterType="java.lang.String">-->
<!--        delete from tb_user where id=#{id}-->
<!--    </delete>-->
</mapper>
